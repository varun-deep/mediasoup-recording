import ExtendableError from 'es6-error';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

class IoPromiseError extends ExtendableError {
  constructor({
    request,
    response
  }) {
    const message = `Socket.io response error.  Expected type '${request.type}' but got '${response.type}'\n` + `response: ${JSON.stringify(response)}\n` + `request: ${JSON.stringify(request)}`;
    super(message);
    this.request = request;
    this.response = response;
    this.type = response.type;
  }

}

const IoPromiseError$1 = IoPromiseError;
function createIoPromise(socket, opts) {
  const options = _objectSpread2({
    eventName: 'request'
  }, opts);

  return function ioPromise(request) {
    let resolve;
    let reject;
    const promise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });
    socket.emit(options.eventName, request, response => {
      if (!response) {
        throw new Error(`Missing response for request: ${JSON.stringify(request)}`);
      }

      if (response.type === request.type) {
        resolve(response);
      } else {
        reject(new IoPromiseError$1({
          request,
          response
        }));
      }
    });
    return promise;
  };
}

export default createIoPromise;
export { IoPromiseError$1 as IoPromiseError };
